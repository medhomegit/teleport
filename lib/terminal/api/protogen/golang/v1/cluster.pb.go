// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.17.3
// source: v1/cluster.proto

package v1

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Cluster describes cluster fields
type Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the cluster name
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Connected indicates if connection to the cluster has been established
	Connected bool `protobuf:"varint,2,opt,name=Connected,proto3" json:"Connected,omitempty"`
	// ACL is the cluster access control list of the logged-in user
	ACL *ClusterACL `protobuf:"bytes,3,opt,name=ACL,proto3" json:"ACL,omitempty"`
}

func (x *Cluster) Reset() {
	*x = Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_cluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cluster) ProtoMessage() {}

func (x *Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_v1_cluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cluster.ProtoReflect.Descriptor instead.
func (*Cluster) Descriptor() ([]byte, []int) {
	return file_v1_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cluster) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

func (x *Cluster) GetACL() *ClusterACL {
	if x != nil {
		return x.ACL
	}
	return nil
}

// ResourceAccess describes access verbs
type ResourceAccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List determines "list" access
	List bool `protobuf:"varint,1,opt,name=List,proto3" json:"List,omitempty"`
	// Read determines "read" access
	Read bool `protobuf:"varint,2,opt,name=Read,proto3" json:"Read,omitempty"`
	// Edit determines "edit" access
	Edit bool `protobuf:"varint,3,opt,name=Edit,proto3" json:"Edit,omitempty"`
	// Create determines "create" access
	Create bool `protobuf:"varint,4,opt,name=Create,proto3" json:"Create,omitempty"`
	// Delete determines "delete" access
	Delete bool `protobuf:"varint,5,opt,name=Delete,proto3" json:"Delete,omitempty"`
}

func (x *ResourceAccess) Reset() {
	*x = ResourceAccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_cluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceAccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceAccess) ProtoMessage() {}

func (x *ResourceAccess) ProtoReflect() protoreflect.Message {
	mi := &file_v1_cluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceAccess.ProtoReflect.Descriptor instead.
func (*ResourceAccess) Descriptor() ([]byte, []int) {
	return file_v1_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *ResourceAccess) GetList() bool {
	if x != nil {
		return x.List
	}
	return false
}

func (x *ResourceAccess) GetRead() bool {
	if x != nil {
		return x.Read
	}
	return false
}

func (x *ResourceAccess) GetEdit() bool {
	if x != nil {
		return x.Edit
	}
	return false
}

func (x *ResourceAccess) GetCreate() bool {
	if x != nil {
		return x.Create
	}
	return false
}

func (x *ResourceAccess) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

// ClusterACL is the access control list of the user
type ClusterACL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sessions defines access to recorded sessions
	Sessions *ResourceAccess `protobuf:"bytes,1,opt,name=Sessions,proto3" json:"Sessions,omitempty"`
	// AuthConnectors defines access to auth.connectors
	AuthConnectors *ResourceAccess `protobuf:"bytes,2,opt,name=AuthConnectors,proto3" json:"AuthConnectors,omitempty"`
	// Roles defines access to roles
	Roles *ResourceAccess `protobuf:"bytes,3,opt,name=Roles,proto3" json:"Roles,omitempty"`
	// Users defines access to users.
	Users *ResourceAccess `protobuf:"bytes,4,opt,name=Users,proto3" json:"Users,omitempty"`
	// TrustedClusters defines access to trusted clusters
	TrustedClusters *ResourceAccess `protobuf:"bytes,5,opt,name=TrustedClusters,proto3" json:"TrustedClusters,omitempty"`
	// Events defines access to audit logs
	Events *ResourceAccess `protobuf:"bytes,6,opt,name=Events,proto3" json:"Events,omitempty"`
	// Tokens defines access to tokens.
	Tokens *ResourceAccess `protobuf:"bytes,7,opt,name=Tokens,proto3" json:"Tokens,omitempty"`
	// Servers defines access to servers.
	Servers *ResourceAccess `protobuf:"bytes,8,opt,name=Servers,proto3" json:"Servers,omitempty"`
	// AppServers defines access to application servers
	AppServers *ResourceAccess `protobuf:"bytes,9,opt,name=AppServers,proto3" json:"AppServers,omitempty"`
	// DBServers defines access to database servers.
	DBServers *ResourceAccess `protobuf:"bytes,10,opt,name=DBServers,proto3" json:"DBServers,omitempty"`
	// KubeServers defines access to kubernetes servers.
	KubeServers *ResourceAccess `protobuf:"bytes,11,opt,name=KubeServers,proto3" json:"KubeServers,omitempty"`
	// SSH defines access to servers
	SSHLogins []string `protobuf:"bytes,12,rep,name=SSHLogins,proto3" json:"SSHLogins,omitempty"`
	// AccessRequests defines access to access requests
	AccessRequests *ResourceAccess `protobuf:"bytes,13,opt,name=AccessRequests,proto3" json:"AccessRequests,omitempty"`
}

func (x *ClusterACL) Reset() {
	*x = ClusterACL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_cluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterACL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterACL) ProtoMessage() {}

func (x *ClusterACL) ProtoReflect() protoreflect.Message {
	mi := &file_v1_cluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterACL.ProtoReflect.Descriptor instead.
func (*ClusterACL) Descriptor() ([]byte, []int) {
	return file_v1_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *ClusterACL) GetSessions() *ResourceAccess {
	if x != nil {
		return x.Sessions
	}
	return nil
}

func (x *ClusterACL) GetAuthConnectors() *ResourceAccess {
	if x != nil {
		return x.AuthConnectors
	}
	return nil
}

func (x *ClusterACL) GetRoles() *ResourceAccess {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *ClusterACL) GetUsers() *ResourceAccess {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ClusterACL) GetTrustedClusters() *ResourceAccess {
	if x != nil {
		return x.TrustedClusters
	}
	return nil
}

func (x *ClusterACL) GetEvents() *ResourceAccess {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ClusterACL) GetTokens() *ResourceAccess {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *ClusterACL) GetServers() *ResourceAccess {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *ClusterACL) GetAppServers() *ResourceAccess {
	if x != nil {
		return x.AppServers
	}
	return nil
}

func (x *ClusterACL) GetDBServers() *ResourceAccess {
	if x != nil {
		return x.DBServers
	}
	return nil
}

func (x *ClusterACL) GetKubeServers() *ResourceAccess {
	if x != nil {
		return x.KubeServers
	}
	return nil
}

func (x *ClusterACL) GetSSHLogins() []string {
	if x != nil {
		return x.SSHLogins
	}
	return nil
}

func (x *ClusterACL) GetAccessRequests() *ResourceAccess {
	if x != nil {
		return x.AccessRequests
	}
	return nil
}

// ClusterAuthSettings contains the form of authentication the auth server supports.
type ClusterAuthSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type is the type of authentication, can be either local or oidc.
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// SecondFactor is the type of second factor to use in authentication.
	// Supported options are: off, otp, and u2f.
	SecondFactor string `protobuf:"bytes,2,opt,name=SecondFactor,proto3" json:"SecondFactor,omitempty"`
	// U2F contains the Universal Second Factor settings needed for authentication.
	U2Fs *AuthSettingsU2F `protobuf:"bytes,3,opt,name=U2Fs,proto3" json:"U2Fs,omitempty"`
	// OIDC contains OIDC connector settings needed for authentication.
	AuthProviders []*AuthProvider `protobuf:"bytes,4,rep,name=AuthProviders,proto3" json:"AuthProviders,omitempty"`
	// HasMessageOfTheDay is a flag indicating that the cluster has MOTD
	// banner text that must be retrieved, displayed and acknowledged by
	// the user.
	HasMessageOfTheDay bool `protobuf:"varint,5,opt,name=HasMessageOfTheDay,proto3" json:"HasMessageOfTheDay,omitempty"`
}

func (x *ClusterAuthSettings) Reset() {
	*x = ClusterAuthSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_cluster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterAuthSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAuthSettings) ProtoMessage() {}

func (x *ClusterAuthSettings) ProtoReflect() protoreflect.Message {
	mi := &file_v1_cluster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAuthSettings.ProtoReflect.Descriptor instead.
func (*ClusterAuthSettings) Descriptor() ([]byte, []int) {
	return file_v1_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *ClusterAuthSettings) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ClusterAuthSettings) GetSecondFactor() string {
	if x != nil {
		return x.SecondFactor
	}
	return ""
}

func (x *ClusterAuthSettings) GetU2Fs() *AuthSettingsU2F {
	if x != nil {
		return x.U2Fs
	}
	return nil
}

func (x *ClusterAuthSettings) GetAuthProviders() []*AuthProvider {
	if x != nil {
		return x.AuthProviders
	}
	return nil
}

func (x *ClusterAuthSettings) GetHasMessageOfTheDay() bool {
	if x != nil {
		return x.HasMessageOfTheDay
	}
	return false
}

// SSOSettings is SSO provider settings
type AuthProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type is the auth provider type (github|oidc|etc)
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// Name is the internal name of the connector.
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	// Display is the display name for the connector.
	Display string `protobuf:"bytes,3,opt,name=Display,proto3" json:"Display,omitempty"`
}

func (x *AuthProvider) Reset() {
	*x = AuthProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_cluster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthProvider) ProtoMessage() {}

func (x *AuthProvider) ProtoReflect() protoreflect.Message {
	mi := &file_v1_cluster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthProvider.ProtoReflect.Descriptor instead.
func (*AuthProvider) Descriptor() ([]byte, []int) {
	return file_v1_cluster_proto_rawDescGZIP(), []int{4}
}

func (x *AuthProvider) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AuthProvider) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AuthProvider) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

// U2FSettings contains the AppID for Universal Second Factor.
type AuthSettingsU2F struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AppID is the U2F AppID.
	AppID string `protobuf:"bytes,1,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *AuthSettingsU2F) Reset() {
	*x = AuthSettingsU2F{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_cluster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthSettingsU2F) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthSettingsU2F) ProtoMessage() {}

func (x *AuthSettingsU2F) ProtoReflect() protoreflect.Message {
	mi := &file_v1_cluster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthSettingsU2F.ProtoReflect.Descriptor instead.
func (*AuthSettingsU2F) Descriptor() ([]byte, []int) {
	return file_v1_cluster_proto_rawDescGZIP(), []int{5}
}

func (x *AuthSettingsU2F) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

var File_v1_cluster_proto protoreflect.FileDescriptor

var file_v1_cluster_proto_rawDesc = []byte{
	0x0a, 0x10, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x14, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x22, 0x6f, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x03, 0x41, 0x43, 0x4c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x43, 0x4c, 0x52, 0x03, 0x41, 0x43, 0x4c, 0x22, 0x7c, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x45, 0x64, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x45, 0x64, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0xde, 0x06, 0x0a, 0x0a, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x43, 0x4c, 0x12, 0x40, 0x0a, 0x08, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x08,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x05, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x4e,
	0x0a, 0x0f, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x54,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3c,
	0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x06, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x41, 0x70,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x12, 0x42, 0x0a, 0x09, 0x44, 0x42, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x09, 0x44, 0x42, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x0b, 0x4b, 0x75, 0x62, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x53, 0x48, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x53, 0x53, 0x48, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x82, 0x02, 0x0a, 0x13, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x04, 0x55, 0x32, 0x46, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x55, 0x32, 0x46, 0x52, 0x04, 0x55,
	0x32, 0x46, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x0d,
	0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x48, 0x61, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x54, 0x68, 0x65,
	0x44, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x48, 0x61, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x44, 0x61, 0x79, 0x22, 0x50, 0x0a,
	0x0c, 0x41, 0x75, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x22,
	0x27, 0x0a, 0x0f, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x55,
	0x32, 0x46, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x6c, 0x69,
	0x62, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_cluster_proto_rawDescOnce sync.Once
	file_v1_cluster_proto_rawDescData = file_v1_cluster_proto_rawDesc
)

func file_v1_cluster_proto_rawDescGZIP() []byte {
	file_v1_cluster_proto_rawDescOnce.Do(func() {
		file_v1_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_cluster_proto_rawDescData)
	})
	return file_v1_cluster_proto_rawDescData
}

var file_v1_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_v1_cluster_proto_goTypes = []interface{}{
	(*Cluster)(nil),             // 0: teleport.terminal.v1.Cluster
	(*ResourceAccess)(nil),      // 1: teleport.terminal.v1.ResourceAccess
	(*ClusterACL)(nil),          // 2: teleport.terminal.v1.ClusterACL
	(*ClusterAuthSettings)(nil), // 3: teleport.terminal.v1.ClusterAuthSettings
	(*AuthProvider)(nil),        // 4: teleport.terminal.v1.AuthProvider
	(*AuthSettingsU2F)(nil),     // 5: teleport.terminal.v1.AuthSettingsU2F
}
var file_v1_cluster_proto_depIdxs = []int32{
	2,  // 0: teleport.terminal.v1.Cluster.ACL:type_name -> teleport.terminal.v1.ClusterACL
	1,  // 1: teleport.terminal.v1.ClusterACL.Sessions:type_name -> teleport.terminal.v1.ResourceAccess
	1,  // 2: teleport.terminal.v1.ClusterACL.AuthConnectors:type_name -> teleport.terminal.v1.ResourceAccess
	1,  // 3: teleport.terminal.v1.ClusterACL.Roles:type_name -> teleport.terminal.v1.ResourceAccess
	1,  // 4: teleport.terminal.v1.ClusterACL.Users:type_name -> teleport.terminal.v1.ResourceAccess
	1,  // 5: teleport.terminal.v1.ClusterACL.TrustedClusters:type_name -> teleport.terminal.v1.ResourceAccess
	1,  // 6: teleport.terminal.v1.ClusterACL.Events:type_name -> teleport.terminal.v1.ResourceAccess
	1,  // 7: teleport.terminal.v1.ClusterACL.Tokens:type_name -> teleport.terminal.v1.ResourceAccess
	1,  // 8: teleport.terminal.v1.ClusterACL.Servers:type_name -> teleport.terminal.v1.ResourceAccess
	1,  // 9: teleport.terminal.v1.ClusterACL.AppServers:type_name -> teleport.terminal.v1.ResourceAccess
	1,  // 10: teleport.terminal.v1.ClusterACL.DBServers:type_name -> teleport.terminal.v1.ResourceAccess
	1,  // 11: teleport.terminal.v1.ClusterACL.KubeServers:type_name -> teleport.terminal.v1.ResourceAccess
	1,  // 12: teleport.terminal.v1.ClusterACL.AccessRequests:type_name -> teleport.terminal.v1.ResourceAccess
	5,  // 13: teleport.terminal.v1.ClusterAuthSettings.U2Fs:type_name -> teleport.terminal.v1.AuthSettingsU2F
	4,  // 14: teleport.terminal.v1.ClusterAuthSettings.AuthProviders:type_name -> teleport.terminal.v1.AuthProvider
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_v1_cluster_proto_init() }
func file_v1_cluster_proto_init() {
	if File_v1_cluster_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_cluster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_cluster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceAccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_cluster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterACL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_cluster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterAuthSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_cluster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_cluster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthSettingsU2F); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_cluster_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_cluster_proto_goTypes,
		DependencyIndexes: file_v1_cluster_proto_depIdxs,
		MessageInfos:      file_v1_cluster_proto_msgTypes,
	}.Build()
	File_v1_cluster_proto = out.File
	file_v1_cluster_proto_rawDesc = nil
	file_v1_cluster_proto_goTypes = nil
	file_v1_cluster_proto_depIdxs = nil
}
